package scripts.progressiveCrafter;

import org.tribot.api.Clicking;
import org.tribot.api.DynamicClicking;
import org.tribot.api.General;
import org.tribot.api.Timing;
import org.tribot.api.input.Keyboard;
import org.tribot.api.input.Mouse;
import org.tribot.api.util.abc.ABCProperties;
import org.tribot.api.util.abc.ABCUtil;
import org.tribot.api.util.abc.preferences.OpenBankPreference;
import org.tribot.api2007.*;
import org.tribot.api2007.ext.Filters;
import org.tribot.api2007.types.RSInterface;
import org.tribot.api2007.types.RSItem;
import org.tribot.api2007.types.RSVarBit;
import org.tribot.script.Script;
import org.tribot.script.ScriptManifest;
import org.tribot.script.interfaces.Arguments;
import org.tribot.script.interfaces.Painting;


import java.awt.*;
import java.awt.event.KeyEvent;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;



@ScriptManifest(authors = {"adamhackz"}, category = "Crafting", name = "ProgressiveCrafter", description = "progressive crafter, use args leather or glass", version = (12))


public class main extends Script implements Painting, Arguments {

    private boolean continuerunning = true;

    private final long START_TIME = System.currentTimeMillis();
    int startingXP = Skills.getXP(Skills.SKILLS.CRAFTING);


    private boolean currentlyPerformingAction = false;
    private boolean useNumbers = false;
    private static final int ESCAPE_CLOSE_INTERFACE_VARBIT = 4681;

    private State scriptState;

    String args;

    private ABCUtil abcInstance = new ABCUtil();




    @Override
    public void passArguments(HashMap<String, String> hashMap) {
        if (hashMap.containsKey("custom_input")) {
            args = hashMap.get("custom_input");
        } else if (hashMap.containsKey("autostart")) {
            args = hashMap.get("autostart");
        }
    }


    private boolean onStart() {
        if (continuerunning) {

            General.println("Script Started... Progressive Crafter V12");
            General.println("Method type: " + args);
            if (General.getTRiBotUsername().equals("filthyfrank")) {
                useNumbers = true;
            }
            if (General.getTRiBotUsername().equals("adamhackz")) {
                useNumbers = true;
            }
            if (useNumbers) {
                if (!escapeCloseInterfacesEnabled()) {
                    setKeybindingDefault(true);
                }
            }
            return true;
        } else return false;

    }

    @Override
    public void run() {
        if (onStart()) {
            while (continuerunning) {
                loop();
            }
        }
    }

    private boolean hasRequired() {
        if (args.equals("leather")) {
            RSItem[] needle = Inventory.find("Needle");
            RSItem[] thread = Inventory.find("Thread");
            return needle.length > 0 && needle[0] != null && thread.length > 0 && thread[0] != null;
        }
        if (args.equals("glass")) {
            RSItem[] glassblowingPipe = Inventory.find("Glassblowing pipe");
            return glassblowingPipe.length > 0 && glassblowingPipe[0] != null;
        }
        return false;
    }

    private boolean hasMats() {
        if (args.equals("leather")) {
            RSItem[] leather = Inventory.find("Leather");
            return leather.length > 0 && leather[0] != null;
        }
        if (args.equals("glass")) {
            RSItem[] glass = Inventory.find("Molten glass");
            return glass.length > 0 && glass[0] != null;

        }
        return false;
    }

    @Override
    public void onPaint(Graphics g) {

        NumberFormat.getInstance();
        long runtime = System.currentTimeMillis() - START_TIME;
        long dumbass = Skills.getXP(Skills.SKILLS.CRAFTING) - startingXP;

        g.drawString("Argument: " + args, 5, 60);
        g.drawString("State: " + scriptState, 5, 80);
        g.drawString("Running for: " + Timing.msToString(runtime), 5, 100);
        g.drawString("XP gained:  " + dumbass, 5, 120);


    }




    private int loop() {
        scriptState = getState();
        General.sleep(50);

        switch (scriptState) {


            case HANDLE_BANK:
                if (!hasMats()) {

                    if (Banking.openBank()) {
                        Timing.waitCondition(() -> Banking.isBankScreenOpen(), General.random(2500, 4100));
                    }
                } else {
                    closeBank();
                }

                break;

            case WITHDRAW_MATS:

                if (args.equals("leather")) {
                    RSItem[] material = Banking.find(Items.LEATHER.material);
                    if (material.length < 1) {
                        continuerunning = false;
                        General.println("Out of " + Items.LEATHER.material);
                    } else
                        continuerunning = true;
                    RSItem[] completeditem = Inventory.find("Unpowered orb", "Beer glass", "Candle lantern", "Oil lamp", "Oil lantern", "Vial", "Fishbowl", "Glass orb", "Sapphire", "Ruby", "Emerald", "Diamond", "Coif");
                    RSItem[] leatheritem = Inventory.find(Filters.Items.nameContains("Leather").combine(Filters.Items.nameNotEquals("Leather"), true));

                    RSItem[] materialInv = Inventory.find(Items.LEATHER.material);
                    RSItem[] materialBank = Banking.find(Items.LEATHER.material);

                    if (completeditem.length > 0 || leatheritem.length > 0){
                        if (materialInv.length < 1){
                            Banking.depositAllExcept(Items.LEATHER.requiredOne, Items.LEATHER.requiredTwo);
                            Timing.waitCondition(() -> completeditem.length < 1 || leatheritem.length < 1, General.random(2500, 4100));
                        }
                    } else {
                        if (hasRequired()){
                            if (materialInv.length < 1) {
                                if (materialBank.length > 0) {
                                    if (Banking.withdraw(0, Items.LEATHER.material)) {
                                        Timing.waitCondition(() -> materialInv.length > 0, General.random(2500, 4100));
                                    }
                                } else {
                                    General.println("Out of leather");
                                    continuerunning = false;
                                }
                            } else {
                                closeBank();

                            }
                        }
                    }
                }

                if (args.equals("glass")) {
                    RSItem[] material = Banking.find(Items.GLASS.material);
                    if (material.length < 1) {
                        continuerunning = false;
                        General.println("Out of " + Items.GLASS.material);
                    } else
                        continuerunning = true;
                    RSItem[] completeditem = Inventory.find("Unpowered orb", "Beer glass", "Candle lantern", "Oil lamp", "Oil lantern", "Vial", "Fishbowl", "Glass orb", "Sapphire", "Ruby", "Emerald", "Diamond", "Coif");
                    RSItem[] leatheritem = Inventory.find(Filters.Items.nameContains("Leather").combine(Filters.Items.nameNotEquals("Leather"), true));
                    
                    RSItem[] materialInv = Inventory.find(Items.GLASS.material);
                    RSItem[] materialBank = Banking.find(Items.GLASS.material);

                    if (completeditem.length > 0 || leatheritem.length > 0){
                        if (materialInv.length < 1){
                            Banking.depositAllExcept(Items.GLASS.requiredOne, Items.GLASS.requiredTwo);
                            Timing.waitCondition(() -> completeditem.length < 1 || leatheritem.length < 1, General.random(2500, 4100));
                        }
                    } else {
                        if (hasRequired()){
                            if (materialInv.length < 1) {
                                if (materialBank.length > 0) {
                                    if (Banking.withdraw(0, Items.GLASS.material)) {
                                        Timing.waitCondition(() -> materialInv.length > 0, General.random(2500, 4100));
                                    }
                                } else {
                                    General.println("Out of molten glass");
                                    continuerunning = false;
                                }
                            } else {
                                closeBank();

                            }
                        }
                    }
                }
                break;


                
            case HANDLING_INTERFACES:
                int craftingLevel = Skills.getActualLevel(Skills.SKILLS.CRAFTING);
                currentlyPerformingAction = continuouslyAnimating();
                RSInterface craftingInterface = Interfaces.get(270);
                    if (args.equals("leather")) {
                        if (!currentlyPerformingAction && !Interfaces.isInterfaceSubstantiated(craftingInterface)) {
                            RSItem[] needle = Inventory.find("Needle");
                            RSItem[] thread = Inventory.find("Thread");
                            RSItem[] leather = Inventory.find("Leather");
                            if (needle.length > 0 && leather.length > 0 && thread.length > 0) {
                                if (needle[0].click() && findNearestToMouse("Leather")[0].click()){
                                    Timing.waitCondition(() -> Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                                }
                            }
                        }

                        if (Interfaces.isInterfaceSubstantiated(270)) {
                            if (craftingLevel < 7) {
                                gloves();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));

                            }

                            if (craftingLevel >= 7 && craftingLevel < 9) {
                                boots();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));

                            }
                            if (craftingLevel >= 9 && craftingLevel < 11) {
                                cowl();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }

                            if (craftingLevel >= 11 && craftingLevel < 14) {
                                leathervambraces();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }


                            if (craftingLevel >= 14 && craftingLevel < 18) {
                                leatherbody();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }


                            if (craftingLevel >= 18 && craftingLevel < 38) {
                                leatherchaps();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }
                            if (craftingLevel >= 38) {
                                RSInterface coif = Interfaces.get(270, 20);
                                //component only returns empty when in ftp
                                if (!coif.getComponentName().isEmpty()) {
                                    coif();

                                } else {
                                    leatherchaps();
                                }
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }
                        }
                    }
                    if (args.equals("glass")) {
                        if (!currentlyPerformingAction && !Interfaces.isInterfaceSubstantiated(craftingInterface)) {
                            RSItem[] glassblowingPipe = Inventory.find("Glassblowing pipe");
                            if (hasItem("Glassblowing pipe") && hasItem("Molten glass")) {
                                if (glassblowingPipe[0].click() && findNearestToMouse("Molten glass")[0].click()){
                                    Timing.waitCondition(() -> Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));

                                }
                            }
                        }
                        if (Interfaces.isInterfaceSubstantiated(craftingInterface)) {
                            if (craftingLevel < 4) {
                                beerglass();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }

                            if (craftingLevel >= 4 && craftingLevel < 12) {
                                candlelantern();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }

                            if (craftingLevel >= 12 && craftingLevel < 33) {
                                oillamp();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }

                            if (craftingLevel >= 33 && craftingLevel < 42) {
                                vial();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }

                            if (craftingLevel >= 42 && craftingLevel < 46) {
                                fishbowl();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }

                            if (craftingLevel >= 46) {
                                orb();
                                Timing.waitCondition(() -> !Interfaces.isInterfaceSubstantiated(craftingInterface), General.random(2500, 4100));
                            }
                        }
                    }



                    break;




            case ANIMATING:
                performTimedActions();
                break;

            case WITHDRAW_REQUIRED:
                withdrawStartingItems();
                break;
        }

        return 50;
    }



    private boolean withdrawStartingItems() {
        if (!Banking.isBankScreenOpen()) {
            openBank();
        } else {
            if (args.equals("leather")) {
                if (hasItem(Items.LEATHER.requiredOne) && hasItem(Items.LEATHER.requiredTwo)){
                    closeBank();
                } else {
                    if (bankHasItem(Items.LEATHER.requiredOne) && !hasItem(Items.LEATHER.requiredOne)) {
                        if (Banking.withdraw(1, Items.LEATHER.requiredOne)) {
                            Timing.waitCondition(() -> Inventory.find(Items.LEATHER.requiredOne).length > 0, General.random(2500, 4100));
                        }
                    }
                    if (bankHasItem(Items.LEATHER.requiredTwo) && !hasItem(Items.LEATHER.requiredTwo)) {
                        if (Banking.withdraw(0, Items.LEATHER.requiredTwo)) {
                            Timing.waitCondition(() -> Inventory.find(Items.LEATHER.requiredTwo).length > 0, General.random(2500, 4100));
                        }
                    }
                }
            }
            if (args.equals("glass")) {
                if (hasItem(Items.GLASS.requiredOne)){
                    closeBank();
                } else {
                    if (bankHasItem(Items.GLASS.requiredOne) && !hasItem(Items.GLASS.requiredOne)) {
                        if (Banking.withdraw(1, Items.GLASS.requiredOne)) {
                            Timing.waitCondition(() -> Inventory.find(Items.GLASS.requiredOne).length > 0, General.random(2500, 4100));
                        }
                    }
                }
            }

        }
        return true;
    }


    public enum State {
        HANDLE_BANK, WITHDRAW_REQUIRED, ANIMATING, WITHDRAW_MATS, HANDLING_INTERFACES;
    }

    private State getState() {
        if (!hasRequired()){
           return State.WITHDRAW_REQUIRED;
        } else {
            if (!Banking.isBankScreenOpen()){
                if (hasMats()){
                    if (continuouslyAnimating()){
                        return State.ANIMATING;
                    }
                    return State.HANDLING_INTERFACES;
                }  else {
                    return State.HANDLE_BANK;
                }
            } else {
                if (hasMats()){
                    return State.HANDLE_BANK;
                } else {
                    return State.WITHDRAW_MATS;
                }
            }
        }
    }


    private boolean closeBank() {
        if (Banking.isBankScreenOpen()) {
            if (useNumbers) {
                if (escapeCloseInterfacesEnabled()) {
                    Keyboard.sendPress(KeyEvent.CHAR_UNDEFINED, KeyEvent.VK_ESCAPE);
                    Timing.waitCondition(() -> !Banking.isBankScreenOpen(), General.random(2500, 4100));

                }
            } else {
                Banking.close();
                Timing.waitCondition(() -> !Banking.isBankScreenOpen(), General.random(2500, 4100));

            }
        }
        return true;
    }

    public boolean openBank() {
        if (!Banking.isBankScreenOpen()){
            Banking.openBank();
            Timing.waitCondition(() -> Banking.isBankScreenOpen(), General.random(2500, 4100));
        }
        return true;
    }


    public static boolean continuouslyAnimating() {
        return Timing.waitCondition(() -> Player.getAnimation() != -1, General.random(1200, 1500));
    }


    private static Point getCenterPoint(RSItem i) {
        Rectangle r = i.getArea();
        if (r != null) {
            Point rPoint = r.getLocation();
            return new Point(rPoint.x + r.width / 2, rPoint.y + r.height / 2);
        }
        return null;
    }

    private static Comparator<RSItem> closestToFarthest = (o1, o2) -> {
        Point botMousePoint = new Point(Mouse.getPos());
        Point p1 = getCenterPoint(o1);
        Point p2 = getCenterPoint(o2);
        if (p1 != null && p2 != null) {
            return Integer.compare((int) botMousePoint.distance(p1), (int) botMousePoint.distance(p2)) > 0 ? 1 : -1;
        }
        return -1;
    };

    public static RSItem[] findNearestToMouse(String... names) {
        RSItem[] Items = Inventory.find(names);
        Arrays.sort(Items, closestToFarthest);
        return Items;
    }



    public static boolean escapeCloseInterfacesEnabled() {
        return RSVarBit.get(ESCAPE_CLOSE_INTERFACE_VARBIT).getValue() == 1;
    }

    private enum Items {
        LEATHER("Leather", "Needle", "Thread", ""),
        GLASS("Molten glass", "Glassblowing pipe", "", "");

        final String material;
        final String requiredOne;
        final String requiredTwo;
        final String finalItem;
        static final Items[] types = {LEATHER, GLASS, };

        Items(String material, String requiredOne, String requiredTwo, String finalItem) {
            this.material = material;
            this.requiredOne = requiredOne;
            this.requiredTwo = requiredTwo;
            this.finalItem = finalItem;

        }

        private String material() {
            return material;
        }

        private String requiredOne() {
            return requiredOne;
        }

        private String requiredTwo() {
            return requiredTwo;
        }

        private String finalItem() {
            return finalItem;
        }
    }


    private boolean gloves() {
        RSInterface iface = Interfaces.get(270, 14);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("1");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));

            return iface.click();
        }
    }

    private boolean boots() {
        RSInterface iface = Interfaces.get(270, 15);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("2");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean cowl() {
        RSInterface iface = Interfaces.get(270, 16);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("3");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean leathervambraces() {
        RSInterface iface = Interfaces.get(270, 17);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("4");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean leatherbody() {
        RSInterface iface = Interfaces.get(270, 18);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("5");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));

            return iface.click();
        }
    }

    private boolean leatherchaps() {
        RSInterface iface = Interfaces.get(270, 19);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("6");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));

            return iface.click();
        }
    }

    private boolean coif() {
        RSInterface iface = Interfaces.get(270, 20);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("7");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean beerglass() {
        RSInterface iface = Interfaces.get(270, 14);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("1");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean candlelantern() {
        RSInterface iface = Interfaces.get(270, 15);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("2");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean oillamp() {
        RSInterface iface = Interfaces.get(270, 16);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("3");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean vial() {
        RSInterface iface = Interfaces.get(270, 17);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("4");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean fishbowl() {
        RSInterface iface = Interfaces.get(270, 18);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("5");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }

    private boolean orb() {
        RSInterface iface = Interfaces.get(270, 19);
        if (!Interfaces.isInterfaceSubstantiated(iface))
            return false;
        if (useNumbers) {
            General.sleep(General.randomSD(70, 210, 140, 70));
            Keyboard.typeString("6");
            return true;
        } else {
            General.sleep(General.randomSD(70, 210, 140, 70));
            return iface.click();
        }
    }


    //Gross stolen code
    public static boolean setKeybindingDefault(boolean esc) {
        if (openControlsOptionsTab()) {
            if (openKeybinding()) {
                RSInterface keybindingMaster = Interfaces.get(121);
                if (keybindingMaster != null) {
                    RSInterface defaultButton = keybindingMaster.getChild(104);
                    if (defaultButton != null && !defaultButton.isHidden()) {
                        if (defaultButton.click("Restore Defaults")) {
                            General.sleep(750);
                            RSInterface top = Interfaces.get(121, 1);
                            if (top != null && !top.isHidden()) {
                                RSInterface close = top.getChild(11);
                                RSInterface escToggle = keybindingMaster.getChild(103);
                                if (escToggle != null && !escToggle.isHidden()) {
                                    if (esc) {
                                        if (escToggle.getTextureID() == 697) {
                                            if (escToggle.click()) {
                                                Timing.waitCondition(() -> escToggle.getTextureID() == 699, General.random(2500, 4100));
                                            }
                                        }
                                        if (close != null && !close.isHidden()) {
                                            return close.click("Close");
                                        }
                                    } else {
                                        if (escToggle.getTextureID() == 699) {
                                            if (escToggle.click()) {
                                                Timing.waitCondition(() -> escToggle.getTextureID() == 697, General.random(2500, 4100));
                                            }
                                        }
                                        if (close != null && !close.isHidden()) {
                                            return close.click("Close");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private static boolean openKeybinding() {
        if (Interfaces.get(121) != null) {
            return true;
        }
        if (openControlsOptionsTab()) {
            RSInterface openKeybinding = Interfaces.get(261, 83);
            if (openKeybinding != null && !openKeybinding.isHidden()) {
                if (openKeybinding.click("Keybinding")) {
                    Timing.waitCondition(() -> Interfaces.get(121) != null, General.random(2500, 4100));
                    return Interfaces.get(121) != null;
                }
            }
        }
        return false;
    }


    private static boolean openControlsOptionsTab() {
        if (GameTab.open(GameTab.TABS.OPTIONS)) {
            RSInterface topOptions = Interfaces.get(261, 1);
            if (topOptions != null) {
                RSInterface controlsButton = topOptions.getChild(6);
                if (controlsButton != null) {
                    if (controlsButton.getTextureID() != 762) {
                        if (controlsButton.click("Controls")) {
                            Timing.waitCondition(() -> controlsButton.getTextureID() == 762, General.random(2500, 4100));
                            return controlsButton.getTextureID() == 762;
                        }
                    } else {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private boolean hasItem (String ItemName){
        RSItem[] items = Inventory.find(ItemName);
        return items.length > 0 && items[0]!=null;
    }

    private boolean bankHasItem (String ItemName){
        RSItem[] items = Banking.find(ItemName);
        return items.length > 0 && items[0]!=null;
    }




    public void performTimedActions() {

        if (abcInstance.shouldCheckTabs())
            abcInstance.checkTabs();

        if (abcInstance.shouldCheckXP()) {
            abcInstance.checkXP();
            General.sleep(General.randomSD(750, 1500, 1000, 150)); // sleep makes sure it checks xp longer.
        }

        if (abcInstance.shouldExamineEntity())
        abcInstance.examineEntity();

        if (abcInstance.shouldMoveMouse())
            abcInstance.moveMouse();

        if (abcInstance.shouldPickupMouse())
            abcInstance.pickupMouse();

        if (abcInstance.shouldRightClick())
        abcInstance.rightClick();

        if (abcInstance.shouldRotateCamera())
            abcInstance.rotateCamera();


        if (abcInstance.shouldLeaveGame())
            abcInstance.leaveGame();


    }









}


